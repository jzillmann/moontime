<project>

	<property file="${root.dir}/build.properties" />

	<!-- ================================================================== -->
	<!-- Classpath 				                                            -->
	<!-- ================================================================== -->

	<path id="compile.classpath">
		<fileset dir="${lib.dir}/compile">
			<include name="**/*.jar" />
			<exclude name="**/*-sources.jar" />
		</fileset>
	</path>
	<path id="test.classpath">
		<fileset dir="${lib.dir}/test">
			<include name="**/*.jar" />
			<exclude name="**/*-sources.jar" />
		</fileset>
	</path>
	<path id="build.classpath">
		<fileset dir="${lib.dir}/build">
			<include name="**/*.jar" />
			<exclude name="**/*-sources.jar" />
		</fileset>
	</path>


	<!-- ================================================================== -->
	<!-- Init 				                                            -->
	<!-- ================================================================== -->

	<path id="artifact.classpath" />
	<path id="artifact.test.classpath" />
    <mkdir dir="${lib.dir}/build" />
    <mkdir dir="${lib.dir}/test" />
    <mkdir dir="${lib.dir}/compile" />
    <mkdir dir="${main.src.dir}" />
    <mkdir dir="${test.src.dir}" />
    <mkdir dir="${main.res.dir}" />
    <mkdir dir="${test.res.dir}" />


	<!-- ================================================================== -->
    <!-- BASIC JAVA BUILD		                                            -->
    <!-- ================================================================== -->

	<macrodef name="compileTests">
        <attribute name="testClasses" />
        <attribute name="srcDir" />
        <attribute name="resDir" />
        <attribute name="artifactClasspath" />
        <sequential>
            <echo>*** Building Test Sources for ${ant.project.name} ***</echo>
            <mkdir dir="@{testClasses}" />

            <javac encoding="${build.encoding}" srcdir="@{srcDir}" includes="**/*.java" destdir="@{testClasses}" debug="${javac.debug}" optimize="${javac.optimize}" target="${javac.version}" source="${javac.version}" deprecation="${javac.deprecation}">
                <compilerarg line="${javac.args} ${javac.args.warnings}" />
                <classpath refid="@{artifactClasspath}" />
                <classpath refid="artifact.classpath" />
                <classpath refid="compile.classpath" />
                <classpath refid="test.classpath" />
                <classpath location="${build.dir.main-classes}" />
            </javac>
            <copy todir="@{testClasses}">
                <fileset dir="@{resDir}"/>
            </copy>
	    </sequential>
    </macrodef>

	<macrodef name="buildJar">
        <attribute name="jarName" />
        <attribute name="mainClasses" />
        <sequential>
            <tstamp>
                <format property="timestamp" pattern="MMM dd yyyy, HH:mm:ss" />
            </tstamp>

            <!-- git version -->
            <exec outputproperty="build.current.revision" executable="git">
                <arg line=" log -1 --pretty=format:%H" />
            </exec>
            <echo>Git Revision: ${build.current.revision}</echo>

            <mkdir dir="${artifact.dir}" />
            <echo>Building jar ${artifact.dir}/${jar.name}</echo>
            <jar jarfile="${artifact.dir}/@{jarName}" basedir="@{mainClasses}">
                <manifest>
                    <section name="dap">
                        <attribute name="Implementation-Title" value="${ant.project.name}" />
                        <attribute name="Implementation-Version" value="${version}" />
                        <attribute name="Raw-Version" value="${version.raw}" />
                        <attribute name="Compile-Time" value="${timestamp}" />
                        <attribute name="Compiled-By" value="${user.name}" />
                        <attribute name="Git-Revision" value="${build.current.revision}" />
                    </section>
                </manifest>
            </jar>
        </sequential>
    </macrodef>

    <macrodef name="runTests">
        <attribute name="srcDir" />
        <attribute name="testReports" />
        <attribute name="testClasses" />
        <attribute name="artifactClasspath" />
        <attribute name="forkmode" />
        <attribute name="haltOnFailure" />
        <sequential>
            <echo>forkmode=@{forkmode}</echo>
            <delete dir="@{testReports}" />
            <mkdir dir="@{testReports}" />
            <echo>Using test classes @{testClasses}</echo>
            <junit showoutput="false" printsummary="yes" haltonfailure="@{haltOnFailure}" haltonerror="@{haltOnFailure}" forkmode="@{forkmode}" fork="yes" maxmemory="256m" dir="${basedir}" errorProperty="tests.failed" failureProperty="tests.failed" >
                <sysproperty key="net.sourceforge.cobertura.datafile" file="${reports.dir}/dap.ser" />
            	<sysproperty key="java.awt.headless" value="true" />
            	<sysproperty key="file.encoding" value="${file.encoding}" />
            	<classpath>
                    <pathelement location="${instrumented.dir}" />
                    <pathelement location="@{testClasses}" />
                    <pathelement location="${build.dir.main-classes}" />
                    <path refid="test.classpath" />
                    <path refid="@{artifactClasspath}" />
                    <path refid="artifact.classpath" />
                    <path refid="compile.classpath" />
                    <!-- for cobertura -->
                    <path refid="build.classpath" />
                </classpath>
            	<formatter type="xml" />
                <batchtest fork="yes" todir="@{testReports}" unless="testcase">
                    <fileset dir="@{srcDir}">
                        <include name="**/*Test.java" />
                        <exclude name="**/Abstract*.java" />
                    </fileset>
                </batchtest>
                <batchtest fork="yes" todir="@{testReports}" if="testcase">
                    <fileset dir="@{srcDir}">
                        <include name="**/${testcase}.java"  />
                    </fileset>
                </batchtest>
            	<jvmarg value="-XX:MaxPermSize=128m" />
            </junit>
            <fail if="tests.failed">Tests failed!</fail>
		</sequential>
    </macrodef>

    <target name="clean">
        <echo>cleaning ${ant.project.name}</echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.dir}" excludes="classes-*-eclipse/"/>
        </delete>
    </target>

    <target name="clean-classes">
        <echo>Cleaning classes of ${ant.project.name} in ${build.dir}</echo>
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.dir}">
                <include name="classes-main/" />
                <include name="classes-test/" />
                <include name="artifacts/" />
            </fileset>
        </delete>
    </target>

    <target name="clean-all">
        <delete dir="${build.dir}" />
    </target>


    <!-- ================================================================== -->
    <!-- ECLIPSE				                                            -->
    <!-- ================================================================== -->

    <target name="clean-eclipse">
        <delete file=".classpath" />
        <delete file=".eclipse" />
        <delete file=".project" />
        <delete dir=".settings" />
    </target>

    <target name="eclipse" depends="clean-eclipse">
        <echo>Generating project files for ${ant.project.name}</echo>
        <taskdef name="eclipse" classname="prantl.ant.eclipse.EclipseTask" classpathref="build.classpath" />
        <mkdir dir="${build.dir.main-classes-eclipse}" />
        <mkdir dir="${build.dir.test-classes-eclipse}" />
        <eclipse>
            <settings>
                <jdtcore compilercompliance="6.0" />
                <resources encoding="UTF-8" />
            </settings>
            <project name="${ant.project.name}" />
            <classpath>
                <container path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6" />

                <source path="${basedir}/src/main/java" output="${build.dir.main-classes-eclipse}" />
                <source path="${basedir}/src/main/resources" output="${build.dir.main-classes-eclipse}" />
                <source path="${basedir}/src/test/java" output="${build.dir.test-classes-eclipse}" />
                <source path="${basedir}/src/test/resources" output="${build.dir.test-classes-eclipse}" />

                <!--<source pathref="dependend-projects" />-->

                <output path="${build.dir.main-classes-eclipse}" />
                <library pathref="test.classpath" exported="true" />
                <library pathref="compile.classpath" exported="true"/>
            </classpath>
        </eclipse>

    	<!--jdt.ui -->
        <copy file="${root.dir}/src/build/eclipse/org.eclipse.jdt.ui.prefs" todir=".settings" />

    	<!--jdt.core -->
    	<copy overwrite="true" file="${root.dir}/src/build/eclipse/org.eclipse.jdt.core.prefs" todir=".settings" />
        <replace file=".settings/org.eclipse.jdt.core.prefs" token="org.eclipse.jdt.core.compiler.compliance=6.0" value="org.eclipse.jdt.core.compiler.compliance=1.6" />
        <replaceregexp file=".classpath" match="path=&quot;(.*).jar&quot;" replace="path=&quot;\1.jar&quot; sourcepath=&quot;\1-sources.jar&quot;" flags="g" />

        <!--moreunit -->
    	<copy file="${root.dir}/src/build/eclipse/org.moreunit.prefs" todir=".settings" />
    	<replace file=".settings/org.moreunit.prefs" token="${module}" value="${ant.project.name}" />

    	<!-- .classpath -->
    	<!-- export projects in eclipse, so that refactoring works across multiple project modules -->
        <replaceregexp file=".classpath" match="(kind=&quot;src&quot; path=&quot;/)" replace="exported=&quot;true&quot; \1" flags="g" />
    </target>



</project>